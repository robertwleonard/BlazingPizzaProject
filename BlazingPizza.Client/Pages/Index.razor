@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject IUriHelper UriHelper
@implements IDisposable;

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var s in specials)
            {
                <li onclick="@(() => OrderState.ShowConfigurePizzaDialog(s))" style="background-image: url('@s.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@s.Name</span>
                        @s.Description
                        <span class="price">@s.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="() => OrderState.RemoveConfiguredPizza(configuredPizza)" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)" onclick="@PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@functions {
    List<PizzaSpecial> specials;
    [CascadingParameter] UserStateProvider UserState { get; set; }

    protected async override Task OnInitAsync()
    {
        specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");
    }

    void IDisposable.Dispose()
    {
        OrderState.StateChanged -= OnOrderStateChanged;
    }

    void OnOrderStateChanged(object sender, EventArgs e) => StateHasChanged();

    async Task PlaceOrder()
    {
        // The server will reject the submission if you're not signed in, so attempt to sign in first if needed
        if (await UserState.TrySignInAsync())
        {
            await HttpClient.PostJsonAsync("orders", OrderState.Order);
            OrderState.ResetOrder();
            UriHelper.NavigateTo("myorders");
        }
    }
}
